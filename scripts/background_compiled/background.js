var module$scripts$utils$cache={},Cache$$module$scripts$utils$cache={max_items:3E3,max_size:1E6,cache:null,cache_item:{id:"",lyrics:"",url:"",domain:"",num_played:0,scroll_stamps:[]},events:{init_complete:!1,init_started:!1},init:function(){Cache$$module$scripts$utils$cache.events.init_started=!0;window.indexedDB=window.indexedDB||window.webkitIndexedDB;window.IDBTransaction=window.IDBTransaction||window.webkitIDBTransaction;window.IDBKeyRange=window.IDBKeyRange||window.webkitIDBKeyRange;if(window.indexedDB){var b=
indexedDB.open("LyricCache",1);b.onerror=function(a){console.log(a.target.error.message)};b.onsuccess=function(a){console.log("request.onsuccess");Cache$$module$scripts$utils$cache.cache=a.target.result;Cache$$module$scripts$utils$cache.events.init_complete=!0};b.onupgradeneeded=function(a){console.log("request.onupgradeneeded "+a);Cache$$module$scripts$utils$cache.cache=a.target.result;a=Cache$$module$scripts$utils$cache.cache.createObjectStore("lyrics",{keyPath:"id"});a.createIndex("id","id",{unique:!0});
a.createIndex("num_played","num_played",{unique:!1});a.transaction.oncomplete=function(a){Cache$$module$scripts$utils$cache.events.init_complete=!0}}}else console.log("Your browser doesn't support a stable version of IndexedDB."),Cache$$module$scripts$utils$cache.events.init_started=!1},add_item:function(b){if(Cache$$module$scripts$utils$cache.events.init_complete){var a=Cache$$module$scripts$utils$cache.cache.transaction(["lyrics"],"readwrite");a.oncomplete=function(a){};a.onerror=function(a){console.log(a.target.error.message)};
a.objectStore("lyrics").add(b).onsuccess=function(a){}}else if(Cache$$module$scripts$utils$cache.events.init_started)setTimeout(function(){Cache$$module$scripts$utils$cache.add_item(b)},300);else return console.log("DB not initilized"),-1},get_item:function(b,a){if(Cache$$module$scripts$utils$cache.events.init_complete){var c=Cache$$module$scripts$utils$cache.cache.transaction(["lyrics"],"readwrite").objectStore("lyrics"),d=c.get(b);d.onerror=function(b){console.log(b.target.error.message);a(null)};
d.onsuccess=function(b){b.target.result?(b=b.target.result,a(b),b.num_played++,c.put(b)):a(null)}}else if(Cache$$module$scripts$utils$cache.events.init_started)setTimeout(function(){Cache$$module$scripts$utils$cache.get_item(b,a)},300);else return console.log("DB not initilized"),-1},update_item:function(b,a){var c=Cache$$module$scripts$utils$cache.cache.transaction(["lyrics"],"readwrite").objectStore("lyrics").put(b);c.onsuccess=function(b){a&&a(!0)};c.onerror=function(b){a&&a(!1);console.log(b.target.error.message)}},
delete_item:function(b,a){var c=cache.transaction(["lyrics"],"readwrite").objectStore("lyrics")["delete"](b);c.onsucces=function(b){a&&a(!0)};c.onerror=function(b){a&&a(!1);console.log(b.target.error.message)}},eject_lowest:function(){}},$jscompDefaultExport$$module$scripts$utils$cache=Cache$$module$scripts$utils$cache;module$scripts$utils$cache["default"]=$jscompDefaultExport$$module$scripts$utils$cache;module$scripts$utils$cache["default"].init();var cur_tab$$module$scripts$background$background=null;function response_handler$$module$scripts$background$background(b){chrome.tabs.sendMessage(cur_tab$$module$scripts$background$background.tab.id,{message:b},function(a){cur_tab$$module$scripts$background$background=null})}
chrome.runtime.onMessage.addListener(function(b,a,c){switch(b.message){case "store-song":module$scripts$utils$cache["default"].add_item(b.song);break;case "get-song":cur_tab$$module$scripts$background$background=a,module$scripts$utils$cache["default"].get_item(b.id,response_handler$$module$scripts$background$background)}});
